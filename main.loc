module root-r (*)

import root

source R from "core.R"
    ( "morloc_fst" as fst
    , "morloc_snd" as snd
    , "morloc_toFst" as toFst
    , "morloc_toSnd" as toSnd
    , "morloc_fst" as fst3
    , "morloc_snd" as snd3
    , "morloc_thr" as thr3
    , "morloc_ifelse" as ifelse
    , "morloc_not" as not
    , "morloc_and" as and
    , "morloc_or" as or
    )

instance Eq a where
  -- this will work for any type that defines a '==' operator
  source R from "core.R" ("morloc_eq" as eq)

instance Ord a where
  -- this will work for any type that defines a '<=' operator
  source R from "core.R" ("morloc_le" as le)

instance Integral Int where
  source R from "core.R"
    ( "morloc_neg" as neg
    , "morloc_add" as add
    , "morloc_sub" as sub
    )
  zero = 0

instance Integral Real where
  source R from "core.R"
    ( "morloc_neg" as neg
    , "morloc_add" as add
    , "morloc_sub" as sub
    )
  zero = 0.0

instance Numeric Real where
  source R from "core.R"
    ( "morloc_inv" as inv
    , "morloc_mul" as mul
    , "morloc_div" as div
    , "morloc_exp" as exp
    , "morloc_log" as log
    )
  one = 1.0


instance Monoid Str where
  mempty = ""
  source R from "core.R" ("paste" as mappend)

instance Monoid (List a) where
  mempty = []
  source R from "core.R" ("c" as mappend)


instance Foldable List where
  source R from "core.R" ("morloc_fold" as fold)

instance Functor List where
  source R from "core.R" ("morloc_map" as map)

instance Sequence List where
  empty = []
  source R from "core.R"
    ( "morloc_at" as at
    , "morloc_slice" as slice
    )


-------------------------------------------------------------------------------
--                 Pack and Unpack internal functions                          
-- These functions are used by morloc internally for (de)serialization of types
-- that cannot be automatically (de)serialized into/from JSON. They should not
-- be exported.
-------------------------------------------------------------------------------

-- WARNING: The Map implementation in R is total crap. R doesn't have a general
-- map type, at least not in base. The `list` type works properly only for
-- string keys. So the Map type here is mostly just for testing purposes.
type R => (Map key val) = "list" key val

instance Packable ([Str],[val]) (Map Str val) where
  source R from "R/data.R"
   ( "morloc_pack_map" as pack
   , "morloc_unpack_map" as unpack
   )

instance Packable (Int) Unit where
  source R from "R/data.R"
   ( "morloc_packUnit" as pack
   , "morloc_unpackUnit" as unpack
   )
